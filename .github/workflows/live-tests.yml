name: live tests

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'corretto'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        run: |
          mvn -B clean package --file pom.xml -DskipTests -DskipITs

      # ----- AWS OIDC Credentials -----
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.CI_AWS_ACCOUNT_ID }}:role/lammy-ci-role"
          aws-region: "${{ vars.AWS_REGION }}"

      # ----- Create Ephemeral Lambda Function -----
      - name: Create ephemeral Lambda function
        run: |
          # Compute our function name here using Bash substitution rules on GITHUB_SHA
          FUNCTION_NAME="lammy-ci-${GITHUB_SHA::7}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          aws lambda create-function \
            --function-name "$FUNCTION_NAME" \
            --zip-file "fileb://lammy-example-lambda-function/target/lammy-example-lambda-function.jar" \
            --handler "io.aleph0.lammy.example.lambdafunction.stream.ExampleStreamLambdaProcessor::handleRequest" \
            --runtime "java8.al2" \
            --role "arn:aws:iam::${{ vars.CI_AWS_ACCOUNT_ID }}:role/lammy-lambda-execution-role"
          # Export the function name for later steps
          echo "FUNCTION_NAME=$FUNCTION_NAME" >> $GITHUB_ENV

      # ----- Invoke the Ephemeral Lambda Function -----
      - name: Invoke ephemeral Lambda function
        env:
          FUNCTION_NAME: ${{ env.FUNCTION_NAME }}
        run: |
          aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --payload "ECHO" \
            response.out
          RESPONSE=$(cat response.out)
          if [ "$RESPONSE" != "ECHO" ]
          then
            echo "Unexpected response: $RESPONSE"
            exit 1
          fi

      # ----- Delete the Ephemeral Lambda Function (always runs) -----
      - name: Delete ephemeral Lambda function
        if: always()
        env:
          FUNCTION_NAME: ${{ env.FUNCTION_NAME }}
        run: |
          aws lambda delete-function --function-name "$FUNCTION_NAME"
